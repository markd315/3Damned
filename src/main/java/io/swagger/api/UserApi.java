/**
 * NOTE: This class is auto generated by the swagger code generator program (unset).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.QueryResponse;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-08-04T19:33:03.042-04:00")

@Api(value = "user", description = "the user API")
public interface UserApi {

    @ApiOperation(value = "Manually ban a user", notes = "", response = Void.class, authorizations = {
        @Authorization(value = "threeD_auth", scopes = {
            @AuthorizationScope(scope = "read:threeD", description = "query against blacklist"),
            @AuthorizationScope(scope = "write:threeD", description = "modify blacklists for users and designs")
            })
    }, tags={ "hash", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "User banned", response = Void.class),
        @ApiResponse(code = 400, message = "Bad request", response = Void.class) })
    
    @RequestMapping(value = "/user/{name}",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    ResponseEntity<Void> banUser(@ApiParam(value = "Banned user to add", required = true) @PathVariable("name") String name);


    @ApiOperation(value = "Test if a user is banned", notes = "", response = QueryResponse.class, authorizations = {
        @Authorization(value = "threeD_auth", scopes = {
            @AuthorizationScope(scope = "read:threeD", description = "query against blacklist")
            })
    }, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Blacklist decision in body", response = QueryResponse.class),
        @ApiResponse(code = 403, message = "Blackisted user flagged for follow-up", response = Void.class) })
    
    @RequestMapping(value = "/user/{name}",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.GET)
    ResponseEntity<QueryResponse> isBanned(@ApiParam(value = "Query if user is banned", required = true) @PathVariable("name") String name);


    @ApiOperation(value = "Unban a user", notes = "", response = Void.class, authorizations = {
        @Authorization(value = "threeD_auth", scopes = {
            @AuthorizationScope(scope = "read:threeD", description = "query against blacklist"),
            @AuthorizationScope(scope = "write:threeD", description = "modify blacklists for users and designs")
            })
    }, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "User unbanned", response = Void.class),
        @ApiResponse(code = 400, message = "Bad request", response = Void.class),
        @ApiResponse(code = 404, message = "User was never banned", response = Void.class) })
    
    @RequestMapping(value = "/user/{name}",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> unban(@ApiParam(value = "Unban this user", required = true) @PathVariable("name") String name);

}
